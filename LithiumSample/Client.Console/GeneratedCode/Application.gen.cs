//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Primavera.Hydrogen;
using Primavera.Hydrogen.Hosting;
using Primavera.Hydrogen.Rest;
using Primavera.Hydrogen.Rest.Client;
using Primavera.Hydrogen.Rest.Client.Authentication;
using Primavera.Lithium.Faturacao.Client.Console.Configuration;

namespace Primavera.Lithium.Faturacao.Client.Console
{
    #region Code

    #region Internal Classes

    /// <summary>
    /// Defines the base class for the type that implements the application.
    /// </summary>
    /// <seealso cref="IConsoleInteractiveApplication" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "Created via dependency injection.")]
    internal abstract partial class ApplicationBase : IConsoleInteractiveApplication, IDisposable
    {
        #region Code

        #region Fields

        private FaturacaoClient fieldClient;

        #endregion

        #region Protected Properties

        /// <summary>
        /// Gets the configuration.
        /// </summary>
        protected ApplicationConfiguration Configuration
        {
            get;
        }

        /// <summary>
        /// Gets the service client.
        /// </summary>
        protected virtual FaturacaoClient Client
        {
            get
            {
                if (this.fieldClient == null)
                {
                    this.fieldClient = this.GetServiceClient();
                }

                return this.fieldClient;
            }
        }

        #endregion

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationBase"/> class.
        /// </summary>
        /// <param name="options">The application configuration options.</param>
        public ApplicationBase(ApplicationConfiguration options)        
        {
            // Validation

            SmartGuard.NotNull(() => options, options);

            // Set properties

            this.Configuration = options;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Runs the application.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task"/> that represents the asynchronous operation.
        /// </returns>
        /// <remarks>
        /// Override this method to implement the client application logic.
        /// </remarks>
        public async Task RunAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            // Heading

            ConsoleHelper.WriteLine("=======================================");
            ConsoleHelper.WriteLine("FATURACAO SERVICE CONSOLE");
            ConsoleHelper.WriteLine("=======================================");

            // Check configuration

            if (!this.CheckConfiguration())
            {
                return;
            }

            // Write configuration

            this.WriteConfiguration();
            
            // Menu

            bool cont = true;
            while (cont)
            {
                ConsoleHelper.WriteLine();
                ConsoleHelper.WriteLine("========================================");
                ConsoleHelper.WriteLine("Main Menu");
                ConsoleHelper.WriteLine("========================================");
                ConsoleHelper.WriteLine();

                this.PrintCustomMenuOptions();

                ConsoleHelper.WriteLine("9. Monitoring.");
                ConsoleHelper.WriteLine("Q. Quit.");
                ConsoleHelper.Write(">> ");

                ConsoleKeyInfo key = ConsoleHelper.ReadKey();
                ConsoleHelper.WriteLine();

                switch (key.Key)
                {
                    case ConsoleKey.Q:
                        cont = false;
                        break;
                    case ConsoleKey.D9:
                    case ConsoleKey.NumPad9:
                        cont = !await this.ShowMonitoringMenuAsync().ConfigureAwait(false);
                        break;
                    default:
                        cont = await this.HandleCustomMenuOptionsAsync(key).ConfigureAwait(false);
                        break;
                }
            }
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Creates an instance of the service client.
        /// </summary>
        /// <returns>
        /// The <see cref="FaturacaoClient"/> instance.
        /// </returns>
        protected virtual FaturacaoClient GetServiceClient()
        {
            ConsoleHelper.WriteInformationLine("Creating the service client for base URI '{0}'...", this.Configuration.ServiceBaseUri);

            return new FaturacaoClient(
                new Uri(this.Configuration.ServiceBaseUri),
                ServiceClientCredentials.NoCredentials);
        }

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources.
        /// </summary>
        /// <param name="disposing"><c>True</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        protected virtual void Dispose(bool disposing)
        {
            // Disposing?

            if (disposing)
            {
                this.DisposeServiceClient();
            }
        }

        /// <summary>
        /// Releases the service client.
        /// </summary>
        protected virtual void DisposeServiceClient()
        {
            if (this.fieldClient != null)
            {
                this.fieldClient.Dispose();
                this.fieldClient = null;
            }
        }

        /// <summary>
        /// Prints the custom menu options.
        /// </summary>
        /// <remarks>
        /// This method needs to be overridden to build the application menu.
        /// </remarks>
        protected abstract void PrintCustomMenuOptions();

        /// <summary>
        /// Handles the custom menu options.
        /// </summary>
        /// <param name="key">The key pressed by the user.</param>
        /// <remarks>
        /// This method needs to be overridden to handle the custom application menu options.
        /// </remarks>
        protected abstract Task<bool> HandleCustomMenuOptionsAsync(ConsoleKeyInfo key);

        /// <summary>
        /// Writes the specified exception to the console.
        /// </summary>
        /// <param name="ex">The exception.</param>
        protected virtual void WriteException(Exception ex)
        {
            ConsoleHelper.WriteErrorLine("An error was raised. See bellow.");
            ConsoleHelper.WriteErrorLine(ex);
        }

        /// <summary>
        /// Writes the specified service exception to the console.
        /// </summary>
        /// <param name="ex">The exception.</param>
        /// <param name="writeTitle">A value indicating whether the title should be written.</param>
        protected virtual void WriteServiceException(ServiceException ex, bool writeTitle = true)
        {
            if (writeTitle)
            {
                ConsoleHelper.WriteErrorLine("Web API returned an error. See bellow.");
            }

            ConsoleHelper.WriteErrorLine(ex.Message);
            this.WriteServiceExceptionError(string.Empty, ex.Body);
            this.WriteServiceExceptionRequest(ex.Request);
            this.WriteServiceExceptionResponse(ex.Response);

            ServiceException innerServiceException = ex.InnerException as ServiceException;
            if (innerServiceException != null)
            {
                this.WriteServiceException(innerServiceException, false);
            }
            else
            {
                this.WriteServiceExceptionInner(ex.InnerException);
            }
        }

        /// <summary>
        /// Writes the specified service error to the console.
        /// </summary>
        /// <param name="spacing">The spacing.</param>
        /// <param name="error">The service error.</param>
        protected virtual void WriteServiceExceptionError(string spacing, ServiceError error)
        {
            if (error != null)
            {
                ConsoleHelper.WriteErrorLine(spacing + "Error code: '{0}'", error.Code);
                ConsoleHelper.WriteErrorLine(spacing + "Error message: '{0}'", error.Message);
                if (error.Details != null)
                {
                    foreach (ServiceErrorDetail detail in error.Details)
                    {
                        this.WriteServiceExceptionErrorDetail(spacing + "..", detail);
                    }
                }
            }
        }

        /// <summary>
        /// Writes the specified service error detail to the console.
        /// </summary>
        /// <param name="spacing">The spacing.</param>
        /// <param name="error">The service error detail.</param>
        protected virtual void WriteServiceExceptionErrorDetail(string spacing, ServiceErrorDetail error)
        {
            if (error != null)
            {
                ConsoleHelper.WriteErrorLine(spacing + "Error code: '{0}'", error.Code);
                ConsoleHelper.WriteErrorLine(spacing + "Error description: '{0}'", error.Description);
            }
        }

        /// <summary>
        /// Writes the specified request message to the console.
        /// </summary>
        /// <param name="request">The request message.</param>
        protected virtual void WriteServiceExceptionRequest(HttpRequestMessageSurrogate request)
        {
            if (request != null)
            {
                ConsoleHelper.WriteErrorLine("Request:");
                ConsoleHelper.WriteErrorLine("..URI: '{0}'", request.RequestUri.AbsoluteUri);
                ConsoleHelper.WriteErrorLine("..Method: '{0}'", request.Method.Method);
                this.WriteHeaders(request.Headers);
            }
        }

        /// <summary>
        /// Writes the specified response message to the console.
        /// </summary>
        /// <param name="response">The response message.</param>
        protected virtual void WriteServiceExceptionResponse(HttpResponseMessageSurrogate response)
        {
            if (response != null)
            {
                ConsoleHelper.WriteErrorLine("Response:");
                ConsoleHelper.WriteErrorLine("..StatusCode: '{0}'", response.StatusCode);
                ConsoleHelper.WriteErrorLine("..ReasonPhrase: '{0}'", response.ReasonPhrase);
                this.WriteHeaders(response.Headers);
            }
        }

        /// <summary>
        /// Writes the specified inner exception to the console.
        /// </summary>
        /// <param name="ex">The exception.</param>
        protected virtual void WriteServiceExceptionInner(Exception ex)
        {
            if (ex != null)
            {
                ConsoleHelper.WriteErrorLine("Inner Exception:");
                ConsoleHelper.WriteErrorLine("..Message: '{0}'", ex.Message);
            }
        }

        /// <summary>
        /// Writes the specified headers to the console.
        /// </summary>
        /// <param name="headers">The headers.</param>
        protected virtual void WriteHeaders(IReadOnlyDictionary<string, IEnumerable<string>> headers)
        {
            if (headers != null)
            {
                ConsoleHelper.WriteErrorLine("..Headers:");

                foreach (string key in headers.Keys)
                {
                    ConsoleHelper.WriteErrorLine("....Header '{0}'", key);

                    foreach (string value in headers[key])
                    {
                        ConsoleHelper.WriteErrorLine("......'{0}'", value);
                    }
                }
            }
        }

        /// <summary>
        /// Checks the configuration.
        /// </summary>
        protected virtual bool CheckConfiguration()
        {
            if (string.IsNullOrEmpty(this.Configuration.ServiceBaseUri))
            {
                ConsoleHelper.WriteErrorLine("The service base URI is missing in configuration.");
                ConsoleHelper.WriteErrorLine("Please press any key to quit.");
                ConsoleHelper.ReadKey();
                return false;
            }

            return true;
        }

        /// <summary>
        /// Writes the configuration.
        /// </summary>
        protected virtual void WriteConfiguration()
        {
            ConsoleHelper.WriteLine("Service........: {0}", this.Configuration.ServiceBaseUri);
            ConsoleHelper.WriteLine("Identity Server: {0}", this.Configuration.IdentityServerBaseUri);
            ConsoleHelper.WriteLine("Client Id......: {0}", Constants.ClientId);
            ConsoleHelper.WriteLine("=======================================");
        }

        /// <summary>
        /// Handles the custom menu options.
        /// </summary>
        /// <returns>
        /// A value indicating whether the user chose to quit the application.
        /// </returns>
        protected virtual async Task<bool> ShowMonitoringMenuAsync()
        {
            // Menu

            bool terminate = false;
            bool cont = true;
            while (cont)
            {
                ConsoleHelper.WriteLine();
                ConsoleHelper.WriteLine("========================================");
                ConsoleHelper.WriteLine("Monitoring Menu");
                ConsoleHelper.WriteLine("========================================");
                ConsoleHelper.WriteLine();
                ConsoleHelper.WriteLine("1. Probe.");
                ConsoleHelper.WriteLine("2. Diagnostics.");
                ConsoleHelper.WriteLine("<. Back.");
                ConsoleHelper.WriteLine("Q. Quit.");
                ConsoleHelper.Write(">> ");

                ConsoleKeyInfo key = ConsoleHelper.ReadKey();
                ConsoleHelper.WriteLine();

                switch (key.Key)
                {
                    case ConsoleKey.Q:
                        cont = false;
                        terminate = true;
                        break;
                    case ConsoleKey.LeftArrow:
                        cont = false;
                        break;
                    case ConsoleKey.D1:
                    case ConsoleKey.NumPad1:
                        await this.ProbeAsync().ConfigureAwait(false);
                        break;
                    case ConsoleKey.D2:
                    case ConsoleKey.NumPad2:
                        await this.DiagnosticsAsync().ConfigureAwait(false);
                        break;
                    default:
                        break;
                }
            }

            // Result

            return terminate;
        }

        /// <summary>
        /// Executes the probe endpoint.
        /// </summary>
        /// <returns>
        /// The <see cref="Task"/> that represents the asynchronous operation.
        /// </returns>
        protected virtual async Task ProbeAsync()
        {
            // Call the Web API

            ConsoleHelper.WriteLine();
            ConsoleHelper.WriteInformationLine("Calling the Web API...");

            try
            {
                ServiceOperationResult<string> response = await this.Client.Monitoring.ProbeAsync().ConfigureAwait(false);

                ConsoleHelper.WriteInformationLine("Web API call succeeded. Result: {0}.", response.Body);
            }
            catch (ServiceException ex)
            {
                this.WriteServiceException(ex);
            }
            catch (Exception ex)
            {
                ConsoleHelper.WriteErrorLine(ex);
            }
        }

        /// <summary>
        /// Executes the diagnosis endpoint.
        /// </summary>
        /// <returns>
        /// The <see cref="Task"/> that represents the asynchronous operation.
        /// </returns>
        protected virtual async Task DiagnosticsAsync()
        {
            // Call the Web API

            ConsoleHelper.WriteLine();
            ConsoleHelper.WriteInformationLine("Calling the Web API...");

            try
            {
                ServiceOperationResult<string> response = await this.Client.Monitoring.DiagnosticsAsync().ConfigureAwait(false);

                ConsoleHelper.WriteInformationLine("Web API call succeeded. Result: {0}.", response.Body);
            }
            catch (ServiceException ex)
            {
                this.WriteServiceException(ex);
            }
            catch (Exception ex)
            {
                ConsoleHelper.WriteErrorLine(ex);
            }
        }

        /// <summary>
        /// Gets a string value from user input.
        /// </summary>
        /// <param name="name">The value name.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>
        /// The string value specified by the user.
        /// </returns>
        protected virtual string GetValueString(string name, string defaultValue = null)
        {
            return this.GetValueString(name, true, defaultValue);
        }

        /// <summary>
        /// Gets a string value from user input.
        /// </summary>
        /// <param name="name">The value name.</param>
        /// <param name="required">A value indicating whether the value is required.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
        /// <returns>
        /// The string value specified by the user.
        /// </returns>
        protected virtual string GetValueString(string name, bool required, string defaultValue = null, bool blankToStop = false)
        {
            string value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (string.IsNullOrEmpty(defaultValue))
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (string.IsNullOrEmpty(defaultValue))
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    value = valueStr;
                }

                if (required)
                {
                    cont = !string.IsNullOrEmpty(value);
                }
                else
                {
                    cont = true;
                }
            }

            return value;
        }

        /// <summary>
        /// Gets a boolean value from user input.
        /// </summary>
        /// <param name="name">The value name.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>
        /// The boolean value specified by the user.
        /// </returns>
        protected virtual bool GetValueBoolean(string name, bool? defaultValue = null)
        {
            return this.GetValueBoolean(name, true, defaultValue);
        }

        /// <summary>
        /// Gets a boolean value from user input.
        /// </summary>
        /// <param name="name">The value name.</param>
        /// <param name="required">A value indicating whether the value is required.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
        /// <returns>
        /// The boolean value specified by the user.
        /// </returns>
        protected virtual bool GetValueBoolean(string name, bool required, bool? defaultValue = null, bool blankToStop = false)
        {
            bool? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (y/n): ");
                    }
                    else
                    {
                        string defaultValueStr = defaultValue ?? false ? "y" : "n";
                        ConsoleHelper.Write($"Please enter the {name} (y/n) (blank = {defaultValueStr}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (y/n) (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (y/n) (blank to stop): ");
                        }
                        else
                        {
                            string defaultValueStr = defaultValue ?? false ? "y" : "n";
                            ConsoleHelper.Write($"Please enter the {name} (y/n) (blank = {defaultValueStr}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (valueStr.EqualsNoCase("Y"))
                    {
                        value = true;
                    }
                    else if (valueStr.EqualsNoCase("N"))
                    {
                        value = false;
                    }
                    else
                    {
                        value = null;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
        }

        /// <summary>
        /// Gets a integer value from user input.
        /// </summary>
        /// <param name="name">The value name.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>
        /// The integer value specified by the user.
        /// </returns>
        protected virtual int GetValueInteger(string name, int? defaultValue = null)
        {
            return this.GetValueInteger(name, true, defaultValue);
        }

        /// <summary>
        /// Gets an integer value from user input.
        /// </summary>
        /// <param name="name">The value name.</param>
        /// <param name="required">A value indicating whether the value is required.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
        /// <returns>
        /// The integer value specified by the user.
        /// </returns>
        protected virtual int GetValueInteger(string name, bool required, int? defaultValue = null, bool blankToStop = false)
        {
            int? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (int.TryParse(valueStr, out int valueInt))
                    {
                        value = valueInt;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
        }

        /// <summary>
        /// Gets a date time value from user input.
        /// </summary>
        /// <param name="name">The value name.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>
        /// The date time value specified by the user.
        /// </returns>
        protected virtual DateTime GetValueDateTime(string name, DateTime? defaultValue = null)
        {
            return this.GetValueDateTime(name, true, defaultValue);
        }

        /// <summary>
        /// Gets an date time value from user input.
        /// </summary>
        /// <param name="name">The value name.</param>
        /// <param name="required">A value indicating whether the value is required.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <param name="blankToStop">A value indicating whether a blank value equals stopping.</param>
        /// <returns>
        /// The date time value specified by the user.
        /// </returns>
        protected virtual DateTime GetValueDateTime(string name, bool required, DateTime? defaultValue = null, bool blankToStop = false)
        {
            DateTime? value = defaultValue;

            bool cont = false;
            while (!cont)
            {
                if (required)
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name}: ");
                    }
                    else
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                    }
                }
                else
                {
                    if (defaultValue == null)
                    {
                        ConsoleHelper.Write($"Please enter the {name} (blank = ignore): ");
                    }
                    else
                    {
                        if (blankToStop)
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank to stop): ");
                        }
                        else
                        {
                            ConsoleHelper.Write($"Please enter the {name} (blank = {defaultValue}): ");
                        }
                    }
                }

                string valueStr = System.Console.ReadLine();
                if (!string.IsNullOrEmpty(valueStr))
                {
                    if (DateTime.TryParse(valueStr, out DateTime valueDateTime))
                    {
                        value = valueDateTime;
                    }
                }

                if (required)
                {
                    cont = value != null;
                }
                else
                {
                    cont = true;
                }
            }

            return value.GetValueOrDefault();
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Defines the type that implements the application.
    /// </summary>
    /// <seealso cref="ApplicationBase" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "Created via dependency injection.")]
    internal sealed partial class Application : ApplicationBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="Application"/> class.
        /// </summary>
        /// <param name="options">The application configuration options.</param>
        public Application(ApplicationConfiguration options)        
            : base(options)
        {
        }

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
