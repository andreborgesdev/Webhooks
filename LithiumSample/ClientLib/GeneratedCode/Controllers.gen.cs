//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Primavera.Hydrogen;
using Primavera.Hydrogen.Rest.Client;
using Primavera.Hydrogen.Rest.Routing;

namespace Primavera.Lithium.Faturacao
{
    #region Code

    #region Public Classes

    /// <summary>
    /// Defines the base class for the type that provides monitoring operations on the service.
    /// </summary>
    /// <seealso cref="IMonitoringOperations" />
    /// <seealso cref="IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class MonitoringOperationsBase : IMonitoringOperations, IDisposable
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets or sets the service client.
        /// </summary>
        protected virtual FaturacaoClientBase Client
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the service client actions.
        /// </summary>
        protected virtual ServiceClientActions<FaturacaoClientBase> Actions
        {
            get;
            set;
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringOperationsBase" /> class.
        /// </summary>
        /// <param name="client">The service client.</param>
        /// <param name="actions">The service client actions.</param>
        protected MonitoringOperationsBase(FaturacaoClientBase client, ServiceClientActions<FaturacaoClientBase> actions)        
        {
            // Validation

            SmartGuard.NotNull(() => client, client);
            SmartGuard.NotNull(() => actions, actions);

            // Set properties

            this.Client = client;
            this.Actions = actions;

            // Additional initialization

            this.Initialize();
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult<string>> ProbeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            // Build the URL of the request
            
            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Monitoring.Probe, 
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion
                });
            
            // Result
            
            return this.Actions.ExecuteGetAsync<string>(requestUri, HttpStatusCode.OK, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult<string>> DiagnosticsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            // Build the URL of the request
            
            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Monitoring.Diagnostics, 
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion
                });
            
            // Result
            
            return this.Actions.ExecuteGetAsync<string>(requestUri, HttpStatusCode.OK, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult<IEnumerable<EndpointInfo>>> EndpointsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            // Build the URL of the request
            
            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Monitoring.Endpoints, 
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion
                });
            
            // Result
            
            return this.Actions.ExecuteGetAsync<IEnumerable<EndpointInfo>>(requestUri, HttpStatusCode.OK, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult<string>> ConfigurationAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            // Build the URL of the request
            
            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Monitoring.Configuration, 
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion
                });
            
            // Result
            
            return this.Actions.ExecuteGetAsync<string>(requestUri, HttpStatusCode.OK, cancellationToken);
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources.
        /// </summary>
        /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        protected virtual void Dispose(bool disposing)
        {
        }

        /// <summary>
        /// Performs additional initialization.
        /// </summary>
        protected virtual void Initialize()
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Provides monitoring operations on the service.
    /// </summary>
    /// <seealso cref="MonitoringOperationsBase" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class MonitoringOperations : MonitoringOperationsBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringOperations" /> class.
        /// </summary>
        /// <param name="client">The service client.</param>
        /// <param name="actions">The service client actions.</param>
        public MonitoringOperations(FaturacaoClientBase client, ServiceClientActions<FaturacaoClientBase> actions)        
            : base(client, actions)
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Billing Controller.
    /// </summary>
    /// <seealso cref="IBillingOperations" />
    /// <seealso cref="IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class BillingOperationsBase : IBillingOperations, IDisposable
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets or sets the service client.
        /// </summary>
        protected virtual FaturacaoClientBase Client
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the service client actions.
        /// </summary>
        protected virtual ServiceClientActions<FaturacaoClientBase> Actions
        {
            get;
            set;
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingOperationsBase" /> class.
        /// </summary>
        /// <param name="client">The service client.</param>
        /// <param name="actions">The service client actions.</param>
        protected BillingOperationsBase(FaturacaoClientBase client, ServiceClientActions<FaturacaoClientBase> actions)        
        {
            // Validation

            SmartGuard.NotNull(() => client, client);
            SmartGuard.NotNull(() => actions, actions);

            // Set properties

            this.Client = client;
            this.Actions = actions;

            // Additional initialization

            this.Initialize();
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult> CreateInvoiceAsync(string amount, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            SmartGuard.NotNullOrEmpty(() => amount, amount);

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Billing.CreateInvoice,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion,
                    ["amount"] = amount,
                });

            // Result

            return this.Actions.ExecutePostNoResultAsync<string>(requestUri, amount, HttpStatusCode.NoContent, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult<IEnumerable<Primavera.Lithium.Faturacao.Models.Invoice>>> GetInvoicesAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Billing.GetInvoices,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion
                });

            // Result

            return this.Actions.ExecuteGetAsync<IEnumerable<Primavera.Lithium.Faturacao.Models.Invoice>>(requestUri, HttpStatusCode.OK, cancellationToken);
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources.
        /// </summary>
        /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        protected virtual void Dispose(bool disposing)
        {
        }

        /// <summary>
        /// Performs additional initialization.
        /// </summary>
        protected virtual void Initialize()
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Billing Controller.
    /// </summary>
    /// <seealso cref="BillingOperationsBase" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class BillingOperations : BillingOperationsBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingOperations" /> class.
        /// </summary>
        /// <param name="client">The service client.</param>
        /// <param name="actions">The service client actions.</param>
        public BillingOperations(FaturacaoClientBase client, ServiceClientActions<FaturacaoClientBase> actions)        
            : base(client, actions)
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks controller.
    /// </summary>
    /// <seealso cref="IWebhooksOperations" />
    /// <seealso cref="IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class WebhooksOperationsBase : IWebhooksOperations, IDisposable
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets or sets the service client.
        /// </summary>
        protected virtual FaturacaoClientBase Client
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the service client actions.
        /// </summary>
        protected virtual ServiceClientActions<FaturacaoClientBase> Actions
        {
            get;
            set;
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksOperationsBase" /> class.
        /// </summary>
        /// <param name="client">The service client.</param>
        /// <param name="actions">The service client actions.</param>
        protected WebhooksOperationsBase(FaturacaoClientBase client, ServiceClientActions<FaturacaoClientBase> actions)        
        {
            // Validation

            SmartGuard.NotNull(() => client, client);
            SmartGuard.NotNull(() => actions, actions);

            // Set properties

            this.Client = client;
            this.Actions = actions;

            // Additional initialization

            this.Initialize();
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult> CreateWebhooksEventAsync(Primavera.Lithium.Faturacao.Models.WebhooksEvent webhooksEvent, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            SmartGuard.NotNull(() => webhooksEvent, webhooksEvent);
            SmartGuard.IsValid(() => webhooksEvent, webhooksEvent);

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Webhooks.CreateWebhooksEvent,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion
                });

            // Result

            return this.Actions.ExecutePostNoResultAsync<Primavera.Lithium.Faturacao.Models.WebhooksEvent>(requestUri, webhooksEvent, HttpStatusCode.NoContent, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult> DeleteWebhooksEventAsync(string product, string webhooksEvent, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            SmartGuard.NotNullOrEmpty(() => product, product);

            SmartGuard.NotNullOrEmpty(() => webhooksEvent, webhooksEvent);

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Webhooks.DeleteWebhooksEvent,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion,
                    ["product"] = product,
                    ["webhooksEvent"] = webhooksEvent,
                });

            // Result

            return this.Actions.ExecuteDeleteNoResultAsync(requestUri, HttpStatusCode.NoContent, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult<IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksEvent>>> GetWebhooksEventsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Webhooks.GetWebhooksEvents,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion
                });

            // Result

            return this.Actions.ExecuteGetAsync<IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksEvent>>(requestUri, HttpStatusCode.OK, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult<IEnumerable<string>>> GetWebhooksEventsByProductAsync(string product, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            SmartGuard.NotNullOrEmpty(() => product, product);

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Webhooks.GetWebhooksEventsByProduct,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion,
                    ["product"] = product,
                });

            // Result

            return this.Actions.ExecuteGetAsync<IEnumerable<string>>(requestUri, HttpStatusCode.OK, cancellationToken);
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources.
        /// </summary>
        /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        protected virtual void Dispose(bool disposing)
        {
        }

        /// <summary>
        /// Performs additional initialization.
        /// </summary>
        protected virtual void Initialize()
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks controller.
    /// </summary>
    /// <seealso cref="WebhooksOperationsBase" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class WebhooksOperations : WebhooksOperationsBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksOperations" /> class.
        /// </summary>
        /// <param name="client">The service client.</param>
        /// <param name="actions">The service client actions.</param>
        public WebhooksOperations(FaturacaoClientBase client, ServiceClientActions<FaturacaoClientBase> actions)        
            : base(client, actions)
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks Subscripiton controller.
    /// </summary>
    /// <seealso cref="ISubscriptionOperations" />
    /// <seealso cref="IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class SubscriptionOperationsBase : ISubscriptionOperations, IDisposable
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets or sets the service client.
        /// </summary>
        protected virtual FaturacaoClientBase Client
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the service client actions.
        /// </summary>
        protected virtual ServiceClientActions<FaturacaoClientBase> Actions
        {
            get;
            set;
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOperationsBase" /> class.
        /// </summary>
        /// <param name="client">The service client.</param>
        /// <param name="actions">The service client actions.</param>
        protected SubscriptionOperationsBase(FaturacaoClientBase client, ServiceClientActions<FaturacaoClientBase> actions)        
        {
            // Validation

            SmartGuard.NotNull(() => client, client);
            SmartGuard.NotNull(() => actions, actions);

            // Set properties

            this.Client = client;
            this.Actions = actions;

            // Additional initialization

            this.Initialize();
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult<IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksSubscription>>> GetWebhooksEventsForSubscriptionAsync(string subscription, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            SmartGuard.NotNullOrEmpty(() => subscription, subscription);

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Subscription.GetWebhooksEventsForSubscription,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion,
                    ["subscription"] = subscription,
                });

            // Result

            return this.Actions.ExecuteGetAsync<IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksSubscription>>(requestUri, HttpStatusCode.OK, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult<IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksSubscription>>> GetWebhooksSubscriptionsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Subscription.GetWebhooksSubscriptions,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion
                });

            // Result

            return this.Actions.ExecuteGetAsync<IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksSubscription>>(requestUri, HttpStatusCode.OK, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult> SubscribeWebhooksEventAsync(Primavera.Lithium.Faturacao.Models.WebhooksSubscriptionDto webhooksSubscription, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            SmartGuard.NotNull(() => webhooksSubscription, webhooksSubscription);
            SmartGuard.IsValid(() => webhooksSubscription, webhooksSubscription);

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Subscription.SubscribeWebhooksEvent,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion
                });

            // Result

            return this.Actions.ExecutePostNoResultAsync<Primavera.Lithium.Faturacao.Models.WebhooksSubscriptionDto>(requestUri, webhooksSubscription, HttpStatusCode.NoContent, cancellationToken);
        }

        /// <inheritdoc />
        public virtual Task<ServiceOperationResult> UnsubscribeWebhooksEventAsync(string webhooksEvent, string subscription, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Begin Validation

            SmartGuard.NotNullOrEmpty(() => webhooksEvent, webhooksEvent);

            SmartGuard.NotNullOrEmpty(() => subscription, subscription);

            // End Validation

            // Route

            Uri requestUri = Models.Metadata.Routes.Instance.Resolve(
                this.Client.BaseUri,
                Models.Metadata.Routes.Subscription.UnsubscribeWebhooksEvent,
                new Dictionary<string, object>()
                {
                    ["version"] = this.Client.ApiVersion,
                    ["webhooksEvent"] = webhooksEvent,
                    ["subscription"] = subscription,
                });

            // Result

            return this.Actions.ExecuteDeleteNoResultAsync(requestUri, HttpStatusCode.NoContent, cancellationToken);
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources.
        /// </summary>
        /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        protected virtual void Dispose(bool disposing)
        {
        }

        /// <summary>
        /// Performs additional initialization.
        /// </summary>
        protected virtual void Initialize()
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks Subscripiton controller.
    /// </summary>
    /// <seealso cref="SubscriptionOperationsBase" />
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class SubscriptionOperations : SubscriptionOperationsBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionOperations" /> class.
        /// </summary>
        /// <param name="client">The service client.</param>
        /// <param name="actions">The service client actions.</param>
        public SubscriptionOperations(FaturacaoClientBase client, ServiceClientActions<FaturacaoClientBase> actions)        
            : base(client, actions)
        {
        }

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
