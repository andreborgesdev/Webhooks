<#@ template debug="true" hostspecific="true" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".gen.cs" #>
<#@ ServiceDesigner processor="ServiceDesignerDirectiveProcessor" requires="FileName=''" #>
<#

// Build the transformations

ServiceModelTransformations<CSharpFileModel> transformations = new ServiceModelTransformations<CSharpFileModel>(this.ServiceModel);

transformations.Add(new ModelsTransformation());

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    (s, t) =>
    {
        if (s is ServiceModel source)
        {
            t.Namespace = new NamespaceModel(source.Namespace + ".Models");
        }
    });

// Transform

CSharpFileModel targetModel = new CSharpFileModel();
transformations.TransformTo(targetModel);

// Create controller

ModelWriterController controller = new ModelWriterController(this.GenerationEnvironment);

// Add writers

controller.AddModelWriter<ConstructorBodyModel>(
    (w, m) =>
    {
        ConstructorModel parentConstructor = m.ParentModelAs<ConstructorModel>();
        ClassModel parentClass = parentConstructor.ParentModelAs<ClassModel>();
        return parentClass.Name.EndsWith("Base");
    }, 
    this.WriteBaseConstructor);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        ClassModel parentClass = parentMethod.ParentModelAs<ClassModel>();
        return parentMethod.Name.EqualsNoCase("SetDefaultValues");
    }, 
    this.WriteSetDefaultValues);

// Generate code

controller.Write(targetModel);

#>