//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Primavera.Hydrogen;
using Primavera.Hydrogen.AspNetCore.Configuration;
using Primavera.Hydrogen.AspNetCore.Mvc;
using Primavera.Hydrogen.AspNetCore.Routing;
using Primavera.Hydrogen.Rest;
using Primavera.Hydrogen.Rest.Routing;
using Primavera.Hydrogen.Storage.Blobs;

namespace Primavera.Lithium.Faturacao.WebApi.Controllers
{
    #region Code

    #region Public Classes

    /// <summary>
    /// Defines base class for the controller that provides monitoring routes.
    /// </summary>
    /// <remarks>
    /// This is the base class of the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class MonitoringControllerBase : ApiControllerBase, IMonitoringController
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets the logger.
        /// </summary>
        protected ILogger Logger
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<ILogger<MonitoringControllerBase>>();
            }
        }

        /// <summary>
        /// Gets the endpoint analyzer service.
        /// </summary>
        protected IEndpointAnalyzerService EndpointAnalyzer
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<IEndpointAnalyzerService>();
            }
        }

        /// <summary>
        /// Gets the configuration analyzer service.
        /// </summary>
        protected IConfigurationAnalyzerService ConfigurationAnalyzer
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<IConfigurationAnalyzerService>();
            }
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringControllerBase" /> class.
        /// </summary>
        protected MonitoringControllerBase()        
            : base()
        {
        }

        #endregion

        #region Public Methods

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Monitoring.Probe)]
        [ProducesResponseType(typeof(string), 200)]
        public abstract Task<IActionResult> ProbeAsync();

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Monitoring.Diagnostics)]
        [ProducesResponseType(typeof(string), 200)]
        public abstract Task<IActionResult> DiagnosticsAsync();

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Monitoring.Endpoints)]
        [ProducesResponseType(typeof(EndpointInfo), 200)]
        public virtual Task<IActionResult> EndpointsAsync()
        {
            // Retrieve the endpoints

            IEnumerable<EndpointInfo> endpoints = this.EndpointAnalyzer.Analyze();

            // Result

            return Task.FromResult<IActionResult>(
                this.Ok(endpoints));
        }

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Monitoring.Configuration)]
        [ProducesResponseType(typeof(IDictionary<string, string>), 200)]
        public virtual async Task<IActionResult> ConfigurationAsync()
        {
            // Retrieve the configuration options using the service

            IDictionary<string, string> options = this.ConfigurationAnalyzer.Analyze();

            // Try to save using the blob storage

            bool saved = await this.SaveConfigurationInBlobStorageAsync(options);
            if (saved)
            {
                return this.Ok("OK (saved in blob storage)");
            }

            // Save in the file system

            this.SaveConfigurationInFileSystem(options);

            // Result

            return this.Ok("OK (saved in the file system)");
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Saves the specified configuration options to the blob storage.
        /// </summary>
        /// <param name="options">The configuration options.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// A value indicating whether the configuration options were saved.
        /// </returns>
        protected virtual async Task<bool> SaveConfigurationInBlobStorageAsync(IDictionary<string, string> options)
        {
            // Resolve blob storage service

            IBlobStorageService service = this.HttpContext.RequestServices.GetService<IBlobStorageService>();
            if (service == null)
            {
                return false;
            }

            // Create the container, if necessary

            IContainerReference container = service.GetContainer("ConfigAnalyzer");

            await container.CreateIfNotExistsAsync().ConfigureAwait(false);

            // Serialize

            JsonSerializerOptions serializerOptions = new JsonSerializerOptions()
            {
                WriteIndented = true,
                IgnoreNullValues = true
            };

            string json = JsonSerializer.Serialize(options, serializerOptions);

            // Upload the blob

            IBlockBlobReference blob = container.GetBlockBlob("FATUR.json");

            await blob.UploadTextAsync(
                json,
                "application/json")
                .ConfigureAwait(false);

            // Result

            return true;
        }

        /// <summary>
        /// Saves the specified configuration options in the file system.
        /// </summary>
        /// <param name="options">The configuration options.</param>
        protected virtual void SaveConfigurationInFileSystem(IDictionary<string, string> options)
        {
            // Serialize

            JsonSerializerOptions serializerOptions = new JsonSerializerOptions()
            {
                WriteIndented = true,
                IgnoreNullValues = true
            };

            string json = JsonSerializer.Serialize(options, serializerOptions);

            // Save

            System.IO.DirectoryInfo directory = new System.IO.DirectoryInfo(
                System.IO.Path.Combine(
                    Environment.CurrentDirectory,
                    ".Config"));

            if (!directory.Exists)
            {
                directory.Create();
            }

            string fileName = System.IO.Path.Combine(directory.FullName, "ConfigAnalyzer.json");
            System.IO.File.WriteAllText(fileName, json);
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Defines the controller that provides monitoring routes.
    /// </summary>
    /// <remarks>
    /// This is the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class MonitoringController : MonitoringControllerBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringController" /> class.
        /// </summary>
        public MonitoringController()        
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Billing Controller.
    /// </summary>
    /// <remarks>
    /// This is the base class of the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class BillingControllerBase : ApiControllerBase, IBillingController
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets the logger.
        /// </summary>
        protected ILogger Logger
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<ILogger<BillingControllerBase>>();
            }
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingControllerBase" /> class.
        /// </summary>
        protected BillingControllerBase()        
            : base()
        {
        }

        #endregion

        #region Public Methods

        /// <inheritdoc />
        [HttpPost(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Billing.CreateInvoice)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        [ProducesResponseType(typeof(void), (int)HttpStatusCode.NoContent)]
        public virtual Task<IActionResult> CreateInvoiceAsync([FromRoute] string amount)
        {
            // Begin Validation

            if (!this.Validate()
                .Required(amount, ErrorCodes.CreateInvoiceAmountRequired, ValidationResources.RES_Error_CreateInvoice_Amount_Required)
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.CreateInvoiceCoreAsync(amount);
        }

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Billing.GetInvoices)]
        [ProducesResponseType(typeof(IEnumerable<Primavera.Lithium.Faturacao.Models.Invoice>), (int)HttpStatusCode.OK)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        public virtual Task<IActionResult> GetInvoicesAsync()
        {
            // Begin Validation

            if (!this.Validate()
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.GetInvoicesCoreAsync();
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Creates a new invoice.
        /// </summary>
        /// <param name="amount">Invoice amount.</param>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> CreateInvoiceCoreAsync(string amount);

        /// <summary>
        /// Get all the invoices.
        /// </summary>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> GetInvoicesCoreAsync();

        #endregion

        #endregion
    }

    /// <summary>
    /// Billing Controller.
    /// </summary>
    /// <remarks>
    /// This is the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class BillingController : BillingControllerBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingController" /> class.
        /// </summary>
        public BillingController()        
            : base()
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks controller.
    /// </summary>
    /// <remarks>
    /// This is the base class of the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class WebhooksControllerBase : ApiControllerBase, IWebhooksController
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets the logger.
        /// </summary>
        protected ILogger Logger
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<ILogger<WebhooksControllerBase>>();
            }
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksControllerBase" /> class.
        /// </summary>
        protected WebhooksControllerBase()        
            : base()
        {
        }

        #endregion

        #region Public Methods

        /// <inheritdoc />
        [HttpPost(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Webhooks.CreateWebhooksEvent)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        [ProducesResponseType(typeof(void), (int)HttpStatusCode.NoContent)]
        public virtual Task<IActionResult> CreateWebhooksEventAsync([FromBody] Primavera.Lithium.Faturacao.Models.WebhooksEvent webhooksEvent)
        {
            // Begin Validation

            if (!this.Validate()
                .Required(webhooksEvent, ErrorCodes.CreateWebhooksEventWebhooksEventRequired, ValidationResources.RES_Error_CreateWebhooksEvent_WebhooksEvent_Required)
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.CreateWebhooksEventCoreAsync(webhooksEvent);
        }

        /// <inheritdoc />
        [HttpDelete(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Webhooks.DeleteWebhooksEvent)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        [ProducesResponseType(typeof(void), (int)HttpStatusCode.NoContent)]
        public virtual Task<IActionResult> DeleteWebhooksEventAsync([FromRoute] string product, [FromRoute] string webhooksEvent)
        {
            // Begin Validation

            if (!this.Validate()
                .Required(product, ErrorCodes.DeleteWebhooksEventProductRequired, ValidationResources.RES_Error_DeleteWebhooksEvent_Product_Required)
                .Required(webhooksEvent, ErrorCodes.DeleteWebhooksEventWebhooksEventRequired, ValidationResources.RES_Error_DeleteWebhooksEvent_WebhooksEvent_Required)
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.DeleteWebhooksEventCoreAsync(product, webhooksEvent);
        }

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Webhooks.GetWebhooksEvents)]
        [ProducesResponseType(typeof(IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksEvent>), (int)HttpStatusCode.OK)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        public virtual Task<IActionResult> GetWebhooksEventsAsync()
        {
            // Begin Validation

            if (!this.Validate()
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.GetWebhooksEventsCoreAsync();
        }

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Webhooks.GetWebhooksEventsByProduct)]
        [ProducesResponseType(typeof(IEnumerable<string>), (int)HttpStatusCode.OK)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        public virtual Task<IActionResult> GetWebhooksEventsByProductAsync([FromRoute] string product)
        {
            // Begin Validation

            if (!this.Validate()
                .Required(product, ErrorCodes.GetWebhooksEventsByProductProductRequired, ValidationResources.RES_Error_GetWebhooksEventsByProduct_Product_Required)
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.GetWebhooksEventsByProductCoreAsync(product);
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Create Webhooks Event.
        /// </summary>
        /// <param name="webhooksEvent">Webhook event being created.</param>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> CreateWebhooksEventCoreAsync(Primavera.Lithium.Faturacao.Models.WebhooksEvent webhooksEvent);

        /// <summary>
        /// Deletes WebooksEvent.
        /// </summary>
        /// <param name="product">The name of the product.</param>
        /// <param name="webhooksEvent">Name of the WebhooksEvent.</param>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> DeleteWebhooksEventCoreAsync(string product, string webhooksEvent);

        /// <summary>
        /// Get Webhooks Events.
        /// </summary>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> GetWebhooksEventsCoreAsync();

        /// <summary>
        /// Get WebooksEvents By product.
        /// </summary>
        /// <param name="product">The name of the product.</param>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> GetWebhooksEventsByProductCoreAsync(string product);

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks controller.
    /// </summary>
    /// <remarks>
    /// This is the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class WebhooksController : WebhooksControllerBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksController" /> class.
        /// </summary>
        public WebhooksController()        
            : base()
        {
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks Subscripiton controller.
    /// </summary>
    /// <remarks>
    /// This is the base class of the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public abstract partial class SubscriptionControllerBase : ApiControllerBase, ISubscriptionController
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets the logger.
        /// </summary>
        protected ILogger Logger
        {
            get
            {
                return this.HttpContext.RequestServices.GetRequiredService<ILogger<SubscriptionControllerBase>>();
            }
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionControllerBase" /> class.
        /// </summary>
        protected SubscriptionControllerBase()        
            : base()
        {
        }

        #endregion

        #region Public Methods

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Subscription.GetWebhooksEventsForSubscription)]
        [ProducesResponseType(typeof(IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksSubscription>), (int)HttpStatusCode.OK)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        public virtual Task<IActionResult> GetWebhooksEventsForSubscriptionAsync([FromRoute] string subscription)
        {
            // Begin Validation

            if (!this.Validate()
                .Required(subscription, ErrorCodes.GetWebhooksEventsForSubscriptionSubscriptionRequired, ValidationResources.RES_Error_GetWebhooksEventsForSubscription_Subscription_Required)
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.GetWebhooksEventsForSubscriptionCoreAsync(subscription);
        }

        /// <inheritdoc />
        [HttpGet(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Subscription.GetWebhooksSubscriptions)]
        [ProducesResponseType(typeof(IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksSubscription>), (int)HttpStatusCode.OK)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        public virtual Task<IActionResult> GetWebhooksSubscriptionsAsync()
        {
            // Begin Validation

            if (!this.Validate()
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.GetWebhooksSubscriptionsCoreAsync();
        }

        /// <inheritdoc />
        [HttpPost(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Subscription.SubscribeWebhooksEvent)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        [ProducesResponseType(typeof(void), (int)HttpStatusCode.NoContent)]
        public virtual Task<IActionResult> SubscribeWebhooksEventAsync([FromBody] Primavera.Lithium.Faturacao.Models.WebhooksSubscriptionDto webhooksSubscription)
        {
            // Begin Validation

            if (!this.Validate()
                .Required(webhooksSubscription, ErrorCodes.SubscribeWebhooksEventWebhooksSubscriptionRequired, ValidationResources.RES_Error_SubscribeWebhooksEvent_WebhooksSubscription_Required)
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.SubscribeWebhooksEventCoreAsync(webhooksSubscription);
        }

        /// <inheritdoc />
        [HttpDelete(Primavera.Lithium.Faturacao.Models.Metadata.Routes.Subscription.UnsubscribeWebhooksEvent)]
        [ProducesResponseType(typeof(ServiceError), (int)HttpStatusCode.BadRequest)]
        [ProducesResponseType(typeof(void), (int)HttpStatusCode.NoContent)]
        public virtual Task<IActionResult> UnsubscribeWebhooksEventAsync([FromRoute] string webhooksEvent, [FromRoute] string subscription)
        {
            // Begin Validation

            if (!this.Validate()
                .Required(webhooksEvent, ErrorCodes.UnsubscribeWebhooksEventWebhooksEventRequired, ValidationResources.RES_Error_UnsubscribeWebhooksEvent_WebhooksEvent_Required)
                .Required(subscription, ErrorCodes.UnsubscribeWebhooksEventSubscriptionRequired, ValidationResources.RES_Error_UnsubscribeWebhooksEvent_Subscription_Required)
                .Result(ErrorCodes.RequestArgsInvalid, ValidationResources.RES_Error_RequestArgsInvalid, out ServiceError validationError))
            {
                return Task.FromResult<IActionResult>(this.BadRequest(validationError));
            }

            // Result

            return this.UnsubscribeWebhooksEventCoreAsync(webhooksEvent, subscription);
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Gets WebooksEvents For Subscription.
        /// </summary>
        /// <param name="subscription">Name of the Subscription.</param>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> GetWebhooksEventsForSubscriptionCoreAsync(string subscription);

        /// <summary>
        /// Gets all the webhooks subscriptions.
        /// </summary>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> GetWebhooksSubscriptionsCoreAsync();

        /// <summary>
        /// Subscribe WebhooksEvent.
        /// </summary>
        /// <param name="webhooksSubscription">Webhooks Subscription.</param>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> SubscribeWebhooksEventCoreAsync(Primavera.Lithium.Faturacao.Models.WebhooksSubscriptionDto webhooksSubscription);

        /// <summary>
        /// Unsubscribe WebhooksEvent.
        /// </summary>
        /// <param name="webhooksEvent">Name of the WebhooksEvent.</param>
        /// <param name="subscription">The event subscription.</param>
        /// <returns>
        /// The action result.
        /// </returns>
        protected abstract Task<IActionResult> UnsubscribeWebhooksEventCoreAsync(string webhooksEvent, string subscription);

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks Subscripiton controller.
    /// </summary>
    /// <remarks>
    /// This is the MVC controller.
    /// </remarks>
    [GeneratedCode("Lithium", "2.0")]
    [SuppressMessage("Maintainability Rules", "SA1402:FileMayOnlyContainASingleType", Justification = "Because of code generation design.")]
    public partial class SubscriptionController : SubscriptionControllerBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionController" /> class.
        /// </summary>
        public SubscriptionController()        
            : base()
        {
        }

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
