//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Localization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.FileProviders;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Primavera.Hydrogen;
using Primavera.Hydrogen.AspNetCore.Configuration;
using Primavera.Hydrogen.AspNetCore.Hosting;
using Primavera.Hydrogen.AspNetCore.Mvc;
using Primavera.Hydrogen.AspNetCore.Mvc.Routing;
using Primavera.Hydrogen.AspNetCore.OpenApi.Schema;
using Primavera.Hydrogen.Configuration;
using Primavera.Hydrogen.Storage.Azure.Tables;
using Primavera.Hydrogen.Telemetry.Azure;
using Primavera.Lithium.Faturacao.WebApi.Configuration;
using Primavera.Lithium.Faturacao.WebApi.Controllers;
using Westwind.AspNetCore.Markdown;

namespace Primavera.Lithium.Faturacao.WebApi
{
    #region Code

    #region Public Classes

    /// <summary>
    /// Defines the base class for the application initialization logic.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public abstract partial class StartupBase
    {
        #region Code

        #region Protected Properties

        /// <summary>
        /// Gets the current environment.
        /// </summary>
        protected IHostEnvironment CurrentEnvironment
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the current configuration.
        /// </summary>
        protected IConfiguration Configuration
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a value indicating whether development settings should be used regardless of the current environment. The default value is false.
        /// </summary>
        protected virtual bool UseDevelopmentSettings
        {
            get
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the logger instance.
        /// </summary>
        /// <remarks>
        /// This instance is only initialized when <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/> starts.
        /// </remarks>
        protected ILogger Logger
        {
            get;
            private set;
        }

        #endregion

        #region Protected Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="StartupBase" /> class.
        /// </summary>
        /// <param name="env">The current host environment.</param>
        /// <param name="configuration">The current configuration.</param>
        protected StartupBase(IHostEnvironment env, IConfiguration configuration)        
        {
            // Validation

            SmartGuard.NotNull(() => env, env);
            SmartGuard.NotNull(() => configuration, configuration);

            // Set properties

            this.CurrentEnvironment = env;
            this.Configuration = configuration;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Called by the runtime when the application starts to allow the application to configure its services.
        /// </summary>
        /// <param name="services">The services collection.</param>
        public virtual void ConfigureServices(IServiceCollection services)
        {
            // Validation

            SmartGuard.NotNull(() => services, services);

            // Configuration

            HostConfiguration hostConfiguration = this.AddConfiguration(services);

            // Validate host configuration

            this.ValidateConfiguration(hostConfiguration);

            // Add cookie policy

            this.AddCookiePolicy(services, hostConfiguration);

            // MVC

            this.AddMvc(services, hostConfiguration);

            // Telemetry

            this.AddTelemetry(services, hostConfiguration);

            // Background services

            this.AddBackgroundServices(services, hostConfiguration);

            // Dependencies

            this.AddDependencies(services, hostConfiguration);

            // OpenAPI documentation

            this.AddOpenApiDocumentation(services, hostConfiguration);

            // Client Library documentation

            this.AddClientLibraryDocumentation(services, hostConfiguration);

            // Additional (custom) services

            this.AddAdditionalServices(services, hostConfiguration);
        }

        /// <summary>
        /// Called by the runtime when the application starts to allow the application to configure itself.
        /// </summary>
        /// <param name="app">The current application.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <param name="logger">The logger.</param>
        public virtual void Configure(IApplicationBuilder app, HostConfiguration hostConfiguration, ILogger<Startup> logger)
        {
            // Validation

            SmartGuard.NotNull(() => app, app);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);
            SmartGuard.NotNull(() => logger, logger);

            // Logger

            this.Logger = logger;

            // Start

            this.Logger.LogDebug("Application configuration starting...");

            // Validate host configuration

            this.ValidateConfiguration(app, hostConfiguration);

            // Error handling

            this.UseErrorHandling(app, hostConfiguration);

            // HTTPS

            this.UseHttps(app, hostConfiguration);

            // Cookie policy

            this.UseCookiePolicy(app, hostConfiguration);

            // Request localization

            this.UseRequestLocalization(app, hostConfiguration);

            // Static files

            this.UseStaticFiles(app, hostConfiguration);

            // Routing

            this.UseRouting(app, hostConfiguration);

            // Endpoint routing

            this.UseEndpoints(app, hostConfiguration);

            // OpenAPI documentation

            this.UseOpenApiDocumentation(app, hostConfiguration);

            // Client Library documentation

            this.UseClientLibraryDocumentation(app, hostConfiguration);

            // Additional application configurations

            this.AdditionalAppConfigurations(app, hostConfiguration);

            // End

            this.Logger.LogDebug("Application configuration ended.");
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Called to add additional (custom) services to the service collection.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual void AddAdditionalServices(IServiceCollection services, HostConfiguration hostConfiguration)
        {
            // Add HttpClient

            services
                .AddHttpClient();
        }

        /// <summary>
        /// Called to add the OpenAPI documentation.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual void AddOpenApiDocumentation(IServiceCollection services, HostConfiguration hostConfiguration)
        {
            // Default version

            services.AddOpenApiDocument(
                (options) =>
                {
                    options.DocumentName = "1.0";
                    options.Title = "PRIMAVERA Lithium Faturacao Service (FATUR) Web API";
                    options.Description = "Serviço de faturação da Primavera.";
                    options.Version = "1.0";
                    
                    options.ApiGroupNames = new string[] { "1.0" };

                    options.FlattenInheritanceHierarchy = true;
                    options.IgnoreObsoleteProperties = true;

                    options.SchemaGenerator = new NoTitleFromDisplayNameOpenApiSchemaGenerator(
                        options.SchemaGenerator.Settings);
                });
        }

        /// <summary>
        /// Called to add configuration to the service collection.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <returns>
        /// An instance of <see cref="HostConfiguration"/> that can be used in the application configuration process.
        /// </returns>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual HostConfiguration AddConfiguration(IServiceCollection services)
        {
            // Common options

            services
                .AddOptions()
                .Configure<HostConfiguration>(
                    this.Configuration.GetSection(nameof(HostConfiguration)))
                .Configure<AzureInsightsTelemetryOptions>(
                    this.Configuration.GetSection(nameof(AzureInsightsTelemetryOptions)));

            // Table storage options

            services
                .Configure<AzureTableStorageOptions>(
                    this.Configuration.GetSection(nameof(AzureTableStorageOptions)));

            // Host configuration snapshot

            services
                .AddOptionsSnapshot<HostConfiguration>();

            // Resolve the host configuration instance

            IServiceProvider provider = services.BuildServiceProvider();
            return provider.GetRequiredService<HostConfiguration>();
        }

        /// <summary>
        /// Called to add the cookie policy to the service collection.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual void AddCookiePolicy(IServiceCollection services, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => services, services);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Add cookie policy

            services
                .Configure<CookiePolicyOptions>(
                    (options) =>
                    {
                        options.MinimumSameSitePolicy = SameSiteMode.Unspecified;

                        options.OnAppendCookie = 
                            cookieContext => this.CheckCookiesSameSite(cookieContext.Context, cookieContext.CookieOptions, true);
                        options.OnDeleteCookie =
                            cookieContext => this.CheckCookiesSameSite(cookieContext.Context, cookieContext.CookieOptions, false);
                    });
        }

        /// <summary>
        /// Called to check the <see cref="CookieOptions.SameSite"/> cookie setting.
        /// </summary>
        /// <param name="httpContext">The HTTP context.</param>
        /// <param name="options">The cookie options.</param>
        /// <param name="appending">A value indicating whether the cookie is being appended. If false, the cookie is being deleted.</param>
        /// <remarks>
        /// The method is called from when a new cookie is appended or deleted.
        /// </remarks>
        protected virtual void CheckCookiesSameSite(HttpContext httpContext, CookieOptions options, bool appending)
        {
            // Validation

            SmartGuard.NotNull(() => httpContext, httpContext);
            SmartGuard.NotNull(() => options, options);

            // Cookie settings

            string domain = options.Domain;
            string path = options.Path;
            SameSiteMode sameSiteMode = options.SameSite;
            bool secure = options.Secure;

            // Logging

            this.Logger?.LogDebug($"Checking cookie same site mode (domain = {domain}, path = {path}, mode = {sameSiteMode}, secure = {secure}, append = {appending})...");

            // Mode is none?

            if (sameSiteMode == SameSiteMode.None)
            {
                // Analyze user agent

                string userAgent = httpContext.Request?.Headers["User-Agent"].ToString();

                // User agent does not allow same site none?

                if (this.DisallowsCookiesSameSiteNone(userAgent))
                {
                    // Logging

                    this.Logger?.LogDebug($"Cookie same site mode set to unspecified because user agent does not support none.");

                    // Change to unspecified

                    options.SameSite = SameSiteMode.Unspecified;
                }
            }
        }

        /// <summary>
        /// Called to determine whether the specified user agent disallows <see cref="SameSiteMode.None"/> in the <see cref="CookieOptions.SameSite"/> cookie setting.
        /// </summary>
        /// <param name="userAgent">The user agent.</param>
        /// <returns>
        /// A value indicating whether the specified user agent disallows <see cref="SameSiteMode.None"/> in the <see cref="CookieOptions.SameSite"/> cookie setting.
        /// </returns>
        /// <remarks>
        /// The method is called from <see cref="CheckCookiesSameSite(HttpContext, CookieOptions, bool)"/>.
        /// </remarks>
        protected virtual bool DisallowsCookiesSameSiteNone(string userAgent)
        {
            // User agent defined?

            if (string.IsNullOrEmpty(userAgent))
            {
                return false;
            }

            // All iOS based browsers

            if (userAgent.Contains("CPU iPhone OS 12") || userAgent.Contains("iPad; CPU OS 12"))
            {
                return true;
            }

            // Mac OS X based browsers that use the Mac OS networking stack

            if (userAgent.Contains("Safari") && userAgent.Contains("Macintosh; Intel Mac OS X 10_14") && userAgent.Contains("Version/"))
            {
                return true;
            }

            // Chrome 50-69

            if (userAgent.Contains("Chrome/5") || userAgent.Contains("Chrome/6"))
            {
                return true;
            }

            // All others

            return false;
        }

        /// <summary>
        /// Called to add dependencies to the service collection.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual void AddDependencies(IServiceCollection services, HostConfiguration hostConfiguration)
        {
            // Add dependencies

            // Table storage

            this.AddAzureTableStorage(services, hostConfiguration);
        }

        /// <summary>
        /// Called to add telemetry to the service collection.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual void AddTelemetry(IServiceCollection services, HostConfiguration hostConfiguration)
        {
            // Add Azure Insights telemetry

            services
                .AddAzureInsightsTelemetryClient()
                .AddAzureInsightsTelemetry();
        }

        /// <summary>
        /// Called to add MVC to the service collection.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual void AddMvc(IServiceCollection services, HostConfiguration hostConfiguration)
        {
            // API controllers with views
            
            IMvcBuilder builder = services
                .AddApiControllersWithViews(
                    (options) =>
                    {
                        // API versioning

                        options.UseVersioning = true;
                        options.DefaultApiVersion = new ApiVersion(
                            Primavera.Lithium.Faturacao.Models.Metadata.ApiVersions.Values.DefaultVersion.Major,
                            Primavera.Lithium.Faturacao.Models.Metadata.ApiVersions.Values.DefaultVersion.Minor);

                        options.ConfigureApiVersioningOptions = this.ConfigureApiVersioningOptions;
                    });

            // Custom configuration

            this.ConfigureMvc(services, builder, hostConfiguration);
        }

        /// <summary>
        /// Called to configure MVC after its is added to the service collection.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="builder">The builder.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="AddMvc(IServiceCollection, HostConfiguration)"/>.
        /// </remarks>
        protected virtual void ConfigureMvc(IServiceCollection services, IMvcBuilder builder, HostConfiguration hostConfiguration)
        {
        }

        /// <summary>
        /// Called to configure the API versioning options.
        /// </summary>
        /// <param name="options">The options.</param>
        /// <remarks>
        /// The method is called from <see cref="AddMvc(IServiceCollection, HostConfiguration)"/>.
        /// </remarks>
        protected virtual void ConfigureApiVersioningOptions(ApiVersioningOptions options)
        {
            // Default API version

            ApiVersion defaultVersion = new ApiVersion(
                Primavera.Lithium.Faturacao.Models.Metadata.ApiVersions.Values.DefaultVersion.Major,
                Primavera.Lithium.Faturacao.Models.Metadata.ApiVersions.Values.DefaultVersion.Minor);

            // Monitoring

            options.Conventions.Controller<MonitoringController>().AdvertisesApiVersion(defaultVersion);
            options.Conventions.Controller<MonitoringController>().HasApiVersion(defaultVersion);

            // Billing

            options.Conventions.Controller<BillingController>().AdvertisesApiVersion(defaultVersion);
            options.Conventions.Controller<BillingController>().HasApiVersion(defaultVersion);

            // Subscription

            options.Conventions.Controller<SubscriptionController>().AdvertisesApiVersion(defaultVersion);
            options.Conventions.Controller<SubscriptionController>().HasApiVersion(defaultVersion);

            // Webhooks

            options.Conventions.Controller<WebhooksController>().AdvertisesApiVersion(defaultVersion);
            options.Conventions.Controller<WebhooksController>().HasApiVersion(defaultVersion);
        }

        /// <summary>
        /// Called to add background services to the service collection.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual void AddBackgroundServices(IServiceCollection services, HostConfiguration hostConfiguration)
        {
        }

        /// <summary>
        /// Called to validate configuration.
        /// </summary>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual void ValidateConfiguration(HostConfiguration hostConfiguration)
        {
        }

        /// <summary>
        /// Called to validate configuration.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/>.
        /// </remarks>
        protected virtual void ValidateConfiguration(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
        }

        /// <summary>
        /// Called to activate error handling.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/>.
        /// </remarks>
        protected virtual void UseErrorHandling(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => app, app);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Logging

            this.Logger.LogDebug($"Activating error handling...");

            // Error route

            string errorRoute = Constants.Controllers.Home.Routes.Error;

            // Middleware to process unhandled exceptions

            // NOTE:
            // When in development all exceptions' details will be sent to the client: 
            // ... In the browser when on MVC routes.
            // ... In the response body when on API routes.
            // Exceptions on MVC routes will be processed by the exception handler bellow
            // to "redirect" the user to the error route to show him a friendly error view.
            // Content routes and API routes are not handled at all here.
            // The Telemetry middleware (added elsewhere) ensures that all unhandled
            // exceptions are collected.

            bool useDevelopmentSettings = this.UseDevelopmentSettings || this.CurrentEnvironment.IsDevelopment();

            if (useDevelopmentSettings)
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseWhen(
                    context =>
                    {
                        return context.Request.PathIsNotApi() && context.Request.PathIsNotContent();
                    },
                    builder =>
                    {
                        builder.UseExceptionHandler(errorRoute);
                    });
            }

            // Middleware to process status code errors
            
            // NOTE:
            // All other status code errors (e.g 404) (not 500) are handled by this middleware to
            // "redirect" the user to the same friendly error view.
            // Content routes and API routes are not handled at all here because we do not want
            // to return HTML when these errors occur.

            app.UseWhen(
                (context) =>
                {
                    return context.Request.PathIsNotApi() && context.Request.PathIsNotContent();
                },
                builder =>
                {
                    builder.UseStatusCodePagesWithReExecute(errorRoute, "?statusCode={0}");
                });
        }

        /// <summary>
        /// Called to activate HTTPS (HSTS and HTTPS redirection).
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/>.
        /// </remarks>
        protected virtual void UseHttps(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => app, app);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Logging

            this.Logger.LogDebug($"Activating HTTPS...");

            // Not for development...

            bool useDevelopmentSettings = this.UseDevelopmentSettings || this.CurrentEnvironment.IsDevelopment();

            if (!useDevelopmentSettings)
            {
                // HSTS

                app.UseHsts();
            }

            // HTTPS redirection

            app.UseHttpsRedirection();
        }

        /// <summary>
        /// Called to activate MVC static files.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/>.
        /// </remarks>
        protected virtual void UseStaticFiles(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => app, app);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Logging

            this.Logger.LogDebug($"Activating static files...");

            // Add middleware

            app.UseStaticFiles();
        }

        /// <summary>
        /// Called to activate request localization.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/>.
        /// </remarks>
        protected virtual void UseRequestLocalization(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => app, app);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Logging

            this.Logger.LogDebug($"Activating request localization...");

            // Options

            RequestLocalizationOptions options = new RequestLocalizationOptions()
            {
                DefaultRequestCulture = new RequestCulture(Constants.Localization.DefaultCulture),
                SupportedCultures = Constants.Localization.SupportedCulturesExtended,
                SupportedUICultures = Constants.Localization.SupportedCulturesExtended
            };

            // Add middleware

            app.UseRequestLocalization(options);
        }

        /// <summary>
        /// Called to activate routing.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/>.
        /// </remarks>
        protected virtual void UseRouting(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => app, app);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Logging

            this.Logger.LogDebug($"Activating routing...");

            // Add middleware

            app.UseRouting();
        }

        /// <summary>
        /// Called to activate the cookie policy.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/>.
        /// </remarks>
        protected virtual void UseCookiePolicy(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => app, app);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Logging

            this.Logger.LogDebug($"Activating cookie policy...");

            // Add middleware

            app.UseCookiePolicy();
        }

        /// <summary>
        /// Called to activate endpoint routing.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/>.
        /// </remarks>
        protected virtual void UseEndpoints(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => app, app);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Logging

            this.Logger.LogDebug($"Activating endpoint routing...");

            // Add middleware

            app.UseEndpoints(endpoints =>
            {
                // Map default controller route

                endpoints.MapControllerRoute("default", "{controller=Home}/{action=Index}/{id?}");

                // On Development environment

                if (this.CurrentEnvironment.IsDevelopment())
                {
                    // Map route analyzer

                    endpoints.MapRouteAnalyzer();

                    // Map configuration analyzer

                    endpoints.MapConfigurationAnalyzer();
                }
            });
        }

        /// <summary>
        /// Called to perform additional application configurations.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/> (just before ending).
        /// </remarks>
        protected virtual void AdditionalAppConfigurations(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
        }

        /// <summary>
        /// Called to active the OpenAPI documentation.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/> (just before ending).
        /// </remarks>
        protected virtual void UseOpenApiDocumentation(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
            // Ignore Spelling: favicon
            // Ignore Spelling: img

            // Validation

            SmartGuard.NotNull(() => app, app);
            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Logging

            this.Logger.LogDebug($"Activating OpenAPI documentation...");

            // Add middleware to generate the schema

            app.UseOpenApi(
                (options) =>
                {
                    options.Path = Constants.Documentation.WebApiDocumentsRoute;
                });

            // Add middleware to customize the UI

            app.UseWhen(
                context =>
                {
                    return context.Request.PathIsWebApiDocumentationCustomization();
                },
                builder =>
                {
                    builder.UseFileServer(
                        new FileServerOptions()
                        {
                            FileProvider = new EmbeddedFileProvider(typeof(StartupBase).Assembly, "Primavera.Lithium.Faturacao.WebApi.GeneratedCode")
                        });
                });

            app.UseWhen(
                context =>
                {
                    return context.Request.PathIsWebApiDocumentation();
                },
                builder =>
                {
                    builder.Use(
                        async (context, next) =>
                        {
                            if (context.Request.Path.StartsWithSegments(Constants.Documentation.WebApiBaseRoute + "/favicon-32x32.png") || context.Request.Path.StartsWithSegments(Constants.Documentation.WebApiBaseRoute + "/favicon-16x16.png"))
                            {
                                context.Response.Redirect("/img/favicon.png");
                                return;
                            }

                            await next.Invoke().ConfigureAwait(false);
                        });
                });

            // Add middleware to build the UI

            app.UseSwaggerUi3(
                (options) =>
                {
                    options.Path = Constants.Documentation.WebApiBaseRoute;
                    options.DocumentPath = Constants.Documentation.WebApiDocumentsRoute;
                    options.DocExpansion = "list";
                    options.EnableTryItOut = false;
                    options.CustomJavaScriptPath = Constants.Documentation.WebApiJavaScriptPath;
                    options.CustomStylesheetPath = Constants.Documentation.WebApiStyleSheetPath;
                });
        }

        /// <summary>
        /// Called to add the client library documentation.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="ConfigureServices(IServiceCollection)"/>.
        /// </remarks>
        protected virtual void AddClientLibraryDocumentation(IServiceCollection services, HostConfiguration hostConfiguration)
        {
            // Add markdown

            services.AddMarkdown();
        }

        /// <summary>
        /// Called to active the client library documentation.
        /// </summary>
        /// <param name="app">The application builder.</param>
        /// <param name="hostConfiguration">The current host configuration.</param>
        /// <remarks>
        /// The method is called from <see cref="Configure(IApplicationBuilder, HostConfiguration, ILogger{Startup})"/> (just before ending).
        /// </remarks>
        protected virtual void UseClientLibraryDocumentation(IApplicationBuilder app, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => hostConfiguration, hostConfiguration);

            // Configure middleware

            app.UseMarkdown();
        }

        /// <summary>
        /// Called when configuring services to configure the table storage service.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <param name="hostConfiguration">The host configuration.</param>
        protected virtual void AddAzureTableStorage(IServiceCollection services, HostConfiguration hostConfiguration)
        {
            // Validation

            SmartGuard.NotNull(() => services, services);

            // Azure table storage

            services.AddAzureTableStorage();
        }

        #endregion

        #endregion
    }

    /// <summary>
    /// Provides the application initialization logic.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public partial class Startup : StartupBase
    {
        #region Code

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="Startup" /> class.
        /// </summary>
        /// <param name="env">The current host environment.</param>
        /// <param name="configuration">The current configuration.</param>
        public Startup(IHostEnvironment env, IConfiguration configuration)        
            : base(env, configuration)
        {
        }

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
