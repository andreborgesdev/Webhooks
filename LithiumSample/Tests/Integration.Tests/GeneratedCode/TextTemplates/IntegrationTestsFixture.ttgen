<#@ template debug="true" hostspecific="true" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".gen.cs" #>
<#@ ServiceDesigner processor="ServiceDesignerDirectiveProcessor" requires="FileName=''" #>
<#

// Build the transformations

ServiceModelTransformations<CSharpFileModel> transformations = new ServiceModelTransformations<CSharpFileModel>(this.ServiceModel);

transformations.Add(
    (s, t) => true,
    (s, t) => { return s is ServiceModel; },
    this.TransformServiceModel);

// Transform

CSharpFileModel targetModel = new CSharpFileModel(this.ServiceModel);
transformations.TransformTo(targetModel);

// Create controller

ModelWriterController controller = new ModelWriterController(this.GenerationEnvironment);

// Add writers

controller.AddModelWriter<ConstructorBodyModel>(
    (w, m) =>
    {
        ConstructorModel parentConstructor = m.ParentModelAs<ConstructorModel>();
        ClassModel parentClass = parentConstructor.ParentModelAs<ClassModel>();
        return parentClass.Name.EqualsNoCase("IntegrationTestsFixtureBase");
    }, 
    this.WriteBaseFixtureClassConstructor);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("Dispose") && parentMethod.Modifiers.HasFlag(MethodModifiers.Protected);
    }, 
    this.WriteDisposeProtected);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("Initialize");
    }, 
    this.WriteInitialize);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("GetServiceClientAsync");
    }, 
    this.WriteGetServiceClientAsync);

controller.AddModelWriter<ConstructorBodyModel>(
    (w, m) =>
    {
        ConstructorModel parentConstructor = m.ParentModelAs<ConstructorModel>();
        ClassModel parentClass = parentConstructor.ParentModelAs<ClassModel>();
        return parentClass.Name.EqualsNoCase("IdentityServerHttpHandlerAccessor");
    }, 
    this.WriteAccessorClassConstructor);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("GetHandler");
    }, 
    this.WriteGetHandler);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("AddConfiguration");
    }, 
    this.WriteAddConfiguration);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigureJwtBearerOptions");
    }, 
    this.WriteConfigureJwtBearerOptions);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigureMvc");
    }, 
    this.WriteConfigureMvc);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("OnJwtBearerAuthenticationFailed");
    }, 
    this.WriteOnJwtBearerAuthenticationFailed);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigureHostConfiguration");
    }, 
    this.WriteConfigureHostConfiguration);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigureRedisCacheOptions");
    }, 
    this.WriteConfigureRedisCacheOptions);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigureAzureKeyVaultSecretsStorageOptions");
    }, 
    this.WriteConfigureAzureKeyVaultSecretsStorageOptions);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigureAzureTableStorageOptions");
    }, 
    this.WriteConfigureAzureTableStorageOptions);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigureAzureBlobStorageOptions");
    }, 
    this.WriteConfigureAzureBlobStorageOptions);

controller.AddModelWriter<MethodBodyModel>(
    (w, m) =>
    {
        MethodModel parentMethod = m.ParentModelAs<MethodModel>();
        return parentMethod.Name.EqualsNoCase("ConfigureAzureBlobStorageDataProtectionOptions");
    }, 
    this.WriteConfigureAzureBlobStorageDataProtectionOptions);

// Generate code

controller.Write(targetModel);

#>