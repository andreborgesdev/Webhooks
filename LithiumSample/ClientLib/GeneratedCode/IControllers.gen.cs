//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Primavera.Hydrogen.Rest.Client;
using Primavera.Hydrogen.Rest.Routing;

namespace Primavera.Lithium.Faturacao
{
    #region Code

    #region Public Interfaces

    /// <summary>
    /// Provides monitoring operations on the service.
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    public partial interface IMonitoringOperations : IDisposable
    {
        #region Code

        #region Methods

        /// <summary>
        /// Probes the service.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<string>> ProbeAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Diagnoses the service.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<string>> DiagnosticsAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Analyzes the service endpoints.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<IEnumerable<EndpointInfo>>> EndpointsAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Analyzes the service configuration.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<string>> ConfigurationAsync(CancellationToken cancellationToken = default(CancellationToken));

        #endregion

        #endregion
    }

    /// <summary>
    /// Billing Controller.
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    public partial interface IBillingOperations : IDisposable
    {
        #region Code

        #region Methods

        /// <summary>
        /// Creates a new invoice.
        /// </summary>
        /// <param name="amount">Invoice amount.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult> CreateInvoiceAsync(string amount, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all the invoices.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<IEnumerable<Primavera.Lithium.Faturacao.Models.Invoice>>> GetInvoicesAsync(CancellationToken cancellationToken = default(CancellationToken));

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks controller.
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    public partial interface IWebhooksOperations : IDisposable
    {
        #region Code

        #region Methods

        /// <summary>
        /// Create Webhooks Event.
        /// </summary>
        /// <param name="webhooksEvent">Webhook event being created.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult> CreateWebhooksEventAsync(Primavera.Lithium.Faturacao.Models.WebhooksEvent webhooksEvent, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes WebooksEvent.
        /// </summary>
        /// <param name="product">The name of the product.</param>
        /// <param name="webhooksEvent">Name of the WebhooksEvent.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult> DeleteWebhooksEventAsync(string product, string webhooksEvent, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Webhooks Events.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksEvent>>> GetWebhooksEventsAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get WebooksEvents By product.
        /// </summary>
        /// <param name="product">The name of the product.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<IEnumerable<string>>> GetWebhooksEventsByProductAsync(string product, CancellationToken cancellationToken = default(CancellationToken));

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks Subscripiton controller.
    /// </summary>
    /// <seealso cref="System.IDisposable" />
    [GeneratedCode("Lithium", "2.0")]
    public partial interface ISubscriptionOperations : IDisposable
    {
        #region Code

        #region Methods

        /// <summary>
        /// Gets WebooksEvents For Subscription.
        /// </summary>
        /// <param name="subscription">Name of the Subscription.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksSubscription>>> GetWebhooksEventsForSubscriptionAsync(string subscription, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all the webhooks subscriptions.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult{T}"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult<IEnumerable<Primavera.Lithium.Faturacao.Models.WebhooksSubscription>>> GetWebhooksSubscriptionsAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe WebhooksEvent.
        /// </summary>
        /// <param name="webhooksSubscription">Webhooks Subscription.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult> SubscribeWebhooksEventAsync(Primavera.Lithium.Faturacao.Models.WebhooksSubscriptionDto webhooksSubscription, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe WebhooksEvent.
        /// </summary>
        /// <param name="webhooksEvent">Name of the WebhooksEvent.</param>
        /// <param name="subscription">The event subscription.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// The <see cref="ServiceOperationResult"/> result.
        /// </returns>
        /// <exception cref="ServiceException">Raised when the operation returns an unexpected status code.</exception>
        Task<ServiceOperationResult> UnsubscribeWebhooksEventAsync(string webhooksEvent, string subscription, CancellationToken cancellationToken = default(CancellationToken));

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
