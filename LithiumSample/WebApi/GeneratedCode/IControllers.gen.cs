//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Primavera.Hydrogen.Rest.Routing;

namespace Primavera.Lithium.Faturacao.WebApi.Controllers
{
    #region Code

    #region Public Interfaces

    /// <summary>
    /// Defines the interface of the controller that provides monitoring routes.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public partial interface IMonitoringController
    {
        #region Code

        #region Methods

        /// <summary>
        /// Provides an action that probes the service. This action is used to perform dependencies tests on the service.
        /// </summary>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// <see cref="HttpStatusCode.OK"/> if the operation succeeds.
        /// </returns>
        Task<IActionResult> ProbeAsync();

        /// <summary>
        /// Provides an action that diagnoses the service. This action is used to perform functional tests on the service.
        /// </summary>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// <see cref="HttpStatusCode.OK"/> if the operation succeeds.
        /// </returns>
        Task<IActionResult> DiagnosticsAsync();

        /// <summary>
        /// Provides an action that analyzes the endpoints of the service. This action is used to verify the service implementation.
        /// </summary>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// <see cref="HttpStatusCode.OK"/> if the operation succeeds.
        /// A list of <see cref="EndpointInfo"/> describing the endpoints.
        /// </returns>
        Task<IActionResult> EndpointsAsync();

        /// <summary>
        /// Provides an action that analyzes the configuration of the service. This action is used to verify the service implementation.
        /// </summary>
        /// <returns>
        /// The <see cref="Task{TResult}"/> that represents the asynchronous operation.
        /// <see cref="HttpStatusCode.OK"/> if the operation succeeds.
        /// </returns>
        /// <remarks>
        /// If the service uses blob storage, the configuration options will be dumped in a blob container named 'ConfigAnalyzer'. Otherwise, the configuration options will be saved in a file named 'ConfigAnalyzer.json'.
        /// </remarks>
        Task<IActionResult> ConfigurationAsync();

        #endregion

        #endregion
    }

    /// <summary>
    /// Billing Controller.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public partial interface IBillingController
    {
        #region Code

        #region Methods

        /// <summary>
        /// Creates a new invoice.
        /// </summary>
        /// <param name="amount">Invoice amount.</param>
        Task<IActionResult> CreateInvoiceAsync(string amount);

        /// <summary>
        /// Get all the invoices.
        /// </summary>
        /// <returns>
        /// Returns a list of invoices.
        /// </returns>
        Task<IActionResult> GetInvoicesAsync();

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks controller.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public partial interface IWebhooksController
    {
        #region Code

        #region Methods

        /// <summary>
        /// Create Webhooks Event.
        /// </summary>
        /// <param name="webhooksEvent">Webhook event being created.</param>
        Task<IActionResult> CreateWebhooksEventAsync(Primavera.Lithium.Faturacao.Models.WebhooksEvent webhooksEvent);

        /// <summary>
        /// Deletes WebooksEvent.
        /// </summary>
        /// <param name="product">The name of the product.</param>
        /// <param name="webhooksEvent">Name of the WebhooksEvent.</param>
        Task<IActionResult> DeleteWebhooksEventAsync(string product, string webhooksEvent);

        /// <summary>
        /// Get Webhooks Events.
        /// </summary>
        /// <returns>
        /// Returns a list of webhooks events.
        /// </returns>
        Task<IActionResult> GetWebhooksEventsAsync();

        /// <summary>
        /// Get WebooksEvents By product.
        /// </summary>
        /// <param name="product">The name of the product.</param>
        /// <returns>
        /// A list of WebhooksEvents produced by product.
        /// </returns>
        Task<IActionResult> GetWebhooksEventsByProductAsync(string product);

        #endregion

        #endregion
    }

    /// <summary>
    /// Webhooks Subscripiton controller.
    /// </summary>
    [GeneratedCode("Lithium", "2.0")]
    public partial interface ISubscriptionController
    {
        #region Code

        #region Methods

        /// <summary>
        /// Gets WebooksEvents For Subscription.
        /// </summary>
        /// <param name="subscription">Name of the Subscription.</param>
        /// <returns>
        /// A list of WebhooksSubscriptions.
        /// </returns>
        Task<IActionResult> GetWebhooksEventsForSubscriptionAsync(string subscription);

        /// <summary>
        /// Gets all the webhooks subscriptions.
        /// </summary>
        /// <returns>
        /// Returns a list with all the webhooks subscriptions.
        /// </returns>
        Task<IActionResult> GetWebhooksSubscriptionsAsync();

        /// <summary>
        /// Subscribe WebhooksEvent.
        /// </summary>
        /// <param name="webhooksSubscription">Webhooks Subscription.</param>
        Task<IActionResult> SubscribeWebhooksEventAsync(Primavera.Lithium.Faturacao.Models.WebhooksSubscriptionDto webhooksSubscription);

        /// <summary>
        /// Unsubscribe WebhooksEvent.
        /// </summary>
        /// <param name="webhooksEvent">Name of the WebhooksEvent.</param>
        /// <param name="subscription">The event subscription.</param>
        Task<IActionResult> UnsubscribeWebhooksEventAsync(string webhooksEvent, string subscription);

        #endregion

        #endregion
    }

    #endregion

    #endregion
}
